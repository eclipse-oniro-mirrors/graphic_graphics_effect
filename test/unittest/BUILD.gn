# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/graphic/graphics_effect/config.gni")

module_output_path = "graphics_effect/effect_process"

group("unittest") {
  testonly = true
  deps = [ ":GraphicsEffectTest" ]
}

ohos_source_set("graphics_effect_test_src") {
  cflags = [
    "-O2",
    "-ftrapv",
    "-FPIC",
    "-FS",
    "-D_FORTIFY_SOURCE=2",
    "-fdata-sections",
    "-ffunction-sections",
  ]
  cflags_cc = [
    "-std=c++17",
    "-O2",
    "-ftrapv",
    "-FPIC",
    "-FS",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility-inlines-hidden",
    "-fdata-sections",
    "-ffunction-sections",
  ]

  include_dirs = [ "${graphics_effect_root}/include" ]

  sources = [
    "${graphics_effect_root}/src/ext/gex_dot_matrix_shader.cpp",
    "${graphics_effect_root}/src/ext/gex_flow_light_sweep_shader.cpp",
    "${graphics_effect_root}/src/ext/gex_marshalling_helper.cpp",
    "${graphics_effect_root}/src/ext/gex_complex_shader.cpp",
    "${graphics_effect_root}/src/ge_aibar_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_bezier_warp_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_border_light_shader.cpp",
    "${graphics_effect_root}/src/ge_color_gradient_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_content_light_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_displacement_distort_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_edge_light_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_external_dynamic_loader.cpp",
    "${graphics_effect_root}/src/ge_grey_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_kawase_blur_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_linear_gradient_blur_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_magnifier_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_mesa_blur_shader_filter.cpp",
    "${graphics_effect_root}/src/ge_pixel_map_shader_mask.cpp",
    "${graphics_effect_root}/src/ge_render.cpp",
    "${graphics_effect_root}/src/ge_ripple_shader_mask.cpp",
    "${graphics_effect_root}/src/ge_sound_wave_filter.cpp",
    "${graphics_effect_root}/src/ge_system_properties.cpp",
    "${graphics_effect_root}/src/ge_visual_effect.cpp",
    "${graphics_effect_root}/src/ge_visual_effect_container.cpp",
    "${graphics_effect_root}/src/ge_visual_effect_impl.cpp",
    "${graphics_effect_root}/src/ge_water_ripple_filter.cpp",
  ]

  external_deps = []
  external_deps += [ "c_utils:utils" ]
  if (is_arkui_x) {
    deps += [
      "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_${target_os}",
      "//foundation/graphic/graphic_2d/rosen/modules/2d_graphics:2d_graphics",
      "//third_party/bounds_checking_function:libsec_static",
      "//third_party/skia:skia_$target_os",
    ]
    external_deps += [ "hilog:libhilog" ]
  } else {
    external_deps += [
      "bounds_checking_function:libsec_shared",
      "graphic_2d:2d_graphics",
      "hilog:libhilog",
    ]
  }

  defines = []
  if (current_os == "ohos") {
    defines += [ "GE_OHOS" ]
    external_deps += [ "init:libbegetutil" ]
  }

  if (ge_is_ohos || ge_is_linux) {
    defines += [ "GE_PLATFORM_UNIX" ]
  }

  part_name = "graphics_effect"
  subsystem_name = "graphic"
}

ohos_unittest("GraphicsEffectTest") {
  module_out_path = module_output_path

  sources = [
    "ge_aibar_shader_filter_test.cpp",
    "ge_bezier_warp_shader_filter_test.cpp",
    "ge_border_light_shader_test.cpp",
    "ge_color_gradient_shader_filter_test.cpp",
    "ge_content_light_shader_filter_test.cpp",
    "ge_displacement_distort_shader_filter_test.cpp",
    "ge_edge_light_shader_filter_test.cpp",
    "ge_grey_shader_filter_test.cpp",
    "ge_kawase_blur_shader_filter_test.cpp",
    "ge_linear_gradient_blur_shader_filter_test.cpp",
    "ge_magnifier_shader_filter_test.cpp",
    "ge_mesa_blur_shader_filter_test.cpp",
    "ge_pixel_map_shader_mask_test.cpp",
    "ge_render_test.cpp",
    "ge_ripple_shader_mask_test.cpp",
    "ge_shader_filter_test.cpp",
    "ge_sound_wave_filter_test.cpp",
    "ge_system_properties_test.cpp",
    "ge_visual_effect_container_test.cpp",
    "ge_visual_effect_impl_test.cpp",
    "ge_visual_effect_test.cpp",
    "ge_water_ripple_filter_test.cpp",
    "gex_dot_matrix_shader_params_test.cpp",
    "gex_dot_matrix_shader_test.cpp",
    "gex_flow_light_sweep_shader_test.cpp",
    "gex_complex_shader_test.cpp",
  ]

  if (!is_mingw && !is_win) {
    sources += [ "ge_external_dynamic_loader_test.cpp" ]
  }

  include_dirs = [ "$graphics_effect_root/include" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  public_deps = [ ":graphics_effect_test_src" ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
  ]

  part_name = "graphics_effect"
  subsystem_name = "graphic"
}
